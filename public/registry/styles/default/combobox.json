{
  "name": "combobox",
  "dependencies": [
    "command",
    "tooltip",
    "button"
  ],
  "files": [
    {
      "name": "combobox.tsx",
      "content": "'use client'\nimport React from 'react'\n\nimport { Button, LabelType, CommandType } from './button'\nimport { Label } from './ShadcnUI/label'\nimport { Popover, PopoverContent, PopoverTrigger } from './ShadcnUI/popover'\nimport { Command, CommandInput, CommandListGroup, CommandListGroupDataType } from './command'\n\nimport { cn } from '@/lib'\nimport { ChevronsUpDown } from 'lucide-react'\nimport { init } from 'next/dist/compiled/webpack/webpack'\n\ninterface OnSelectType<T> {\n  value: T\n  setValue: React.Dispatch<React.SetStateAction<T>>\n}\n\ntype ComboboxType<T> = {\n  title?: string\n  onSelect: OnSelectType<T>\n  className?: ClassNameType\n  data: CommandListGroupDataType[]\n  command?: CommandType\n  label?: LabelType\n  commandInput?: boolean\n  groupheading?: string[]\n}\n\ninterface ClassNameType {\n  wrapper?: string\n  trigger?: string\n  content?: string\n}\n\nconst Combobox = <T,>({\n  data,\n  className,\n  title,\n  command,\n  label,\n  groupheading,\n  commandInput = true,\n  onSelect,\n}: ComboboxType<T>) => {\n  //NOTE: you can use state management lib instead of this local states to use it globally\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <>\n      <div className={cn('', className?.wrapper)}>\n        {title && <Label htmlFor={title}>{title}</Label>}\n        <Popover\n          open={open}\n          onOpenChange={setOpen}\n        >\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              disabled={false}\n              role=\"combobox\"\n              secondIcon={<ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />}\n              aria-expanded={open}\n              className={cn(`w-[200px] justify-between capitalize`, className?.trigger)}\n              label={{ children: 'sdf', showLabel: true, side: 'top', ...label }}\n              command={{ ...command, action: () => setOpen(!open) } as CommandType}\n            >\n              <span className=\"truncate\">{onSelect.value as string}</span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent\n            className={cn('w-[200px] p-0 h-[245px]', className?.content ?? 'Select one...')}\n            id={title}\n          >\n            <Command>\n              {commandInput && (\n                <CommandInput\n                  placeholder=\"Search one...\"\n                  required\n                />\n              )}\n              <CommandListGroup\n                data={data}\n                selected={['']}\n                groupheading={groupheading || []}\n                onSelect={(value: string | undefined) => {\n                  setOpen(false)\n                  onSelect.setValue(value as T)\n                }}\n              />\n            </Command>\n          </PopoverContent>\n        </Popover>\n      </div>\n    </>\n  )\n}\n\nCombobox.displayName = 'Combobox'\n\nexport { Combobox, type ComboboxType, type ClassNameType }\n"
    }
  ],
  "type": "components:ui"
}