{
  "name": "table",
  "dependencies": [],
  "files": [
    {
      "name": "table.tsx",
      "content": "import * as React from 'react'\n\nimport { Checkbox } from './checkbox'\n\nimport { cn } from '@/lib/utils'\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationNext,\n  PaginationPrevious,\n} from './ShadcnUI'\nimport { Button } from './button'\nimport { ChevronLeftIcon, ChevronRightIcon, ChevronsLeftIcon, ChevronsRightIcon } from 'lucide-react'\nimport { ScrollArea, ScrollAreaProps } from '@radix-ui/react-scroll-area'\nimport { TooltipProvider } from './tooltip'\nimport { Combobox } from './combobox'\nimport { CommandListGroupDataType } from './command'\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table\n        ref={ref}\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n)\nTable.displayName = 'Table'\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <thead\n      ref={ref}\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n)\nTableHeader.displayName = 'TableHeader'\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody\n      ref={ref}\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n)\nTableBody.displayName = 'TableBody'\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot\n      ref={ref}\n      className={cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}\n      {...props}\n    />\n  )\n)\nTableFooter.displayName = 'TableFooter'\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', className)}\n      {...props}\n    />\n  )\n)\nTableRow.displayName = 'TableRow'\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',\n        className\n      )}\n      {...props}\n    />\n  )\n)\nTableHead.displayName = 'TableHead'\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td\n      ref={ref}\n      className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}\n      {...props}\n    />\n  )\n)\nTableCell.displayName = 'TableCell'\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption\n      ref={ref}\n      className={cn('mt-4 text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  )\n)\nTableCaption.displayName = 'TableCaption'\n\ninterface TableHeaderColumns extends React.HTMLProps<HTMLTableCellElement> {\n  sortable: boolean\n}\n\ninterface TableFooterColumns extends React.HTMLProps<HTMLTableCellElement> {}\n\ninterface TableDataType {\n  [key: string]: TableDataKey\n}\n\ninterface TableType extends Partial<React.ComponentPropsWithoutRef<typeof ScrollArea>> {}\ninterface TableDataKey extends React.HTMLProps<HTMLTableCellElement> {}\ninterface TableCaptionType extends React.HTMLProps<HTMLTableCaptionElement> {}\ninterface TablePaginationType extends React.HTMLProps<HTMLDivElement> {\n  groupSize: number\n  activePage?: number\n  showCount?: boolean\n  showGroup?: boolean\n}\n\ninterface TableViewProps {\n  table?: TableType\n  data: TableDataType[]\n  selection?: boolean\n  header?: TableHeaderColumns[]\n  footer?: TableFooterColumns\n  caption?: TableCaptionType\n  pagination?: TablePaginationType\n}\n\nconst TableView = ({ selection, pagination, header, footer, data, caption, table }: TableViewProps) => {\n  const { className: tableClassName, ...tableProps } = table! ?? {}\n  const { children: captionChildren, className: captionClassName, ...captionProps } = caption! ?? []\n  const [selected, setSelected] = React.useState<TableDataType[]>([])\n  const [paginationState, setPaginationState] = React.useState({\n    activePage: pagination?.activePage ?? 0,\n    groupSize: pagination?.groupSize ?? data.length / 3,\n  })\n\n  const splitIntoChunks = (array: typeof data, chunkSize: number) => {\n    const chunks = []\n    for (let i = 0; i < array.length; i += chunkSize) {\n      chunks.push(array.slice(i, i + chunkSize))\n    }\n    return chunks\n  }\n  const [value, setValue] = React.useState<string>(paginationState.groupSize.toString())\n\n  const resultArrays = splitIntoChunks(data, +value)\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <ScrollArea\n        className={cn(`border border-border rounded-lg`, tableClassName)}\n        {...tableProps}\n      >\n        <Table>\n          {caption && (\n            <TableCaption\n              className={cn('mb-4', captionClassName)}\n              {...captionProps}\n            >\n              {caption?.children}\n            </TableCaption>\n          )}\n          {header && (\n            <TableHeader>\n              <TableRow>\n                {header.map((column, idx) => {\n                  const { children, className, ...props } = column\n                  return (\n                    <TableHead\n                      key={idx}\n                      {...props}\n                    >\n                      <span\n                        className={cn(\n                          'flex items-center gap-2 w-full',\n                          idx === header.length - 1 && 'justify-end',\n                          className\n                        )}\n                      >\n                        {selection && idx === 0 && (\n                          <Checkbox\n                            className=\"border-border\"\n                            onClick={() => setSelected(selected.length === data.length ? [] : data.map(item => item))}\n                            checked={\n                              selected.length === data.length\n                                ? true\n                                : selected.length < data.length && selected.length\n                                  ? 'indeterminate'\n                                  : false\n                            }\n                          />\n                        )}\n                        {children}\n                      </span>\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            </TableHeader>\n          )}\n          {data && !!resultArrays.length && (\n            <TableBody>\n              {resultArrays[paginationState.activePage ?? 0].map((item, idx) => (\n                <TableRow key={idx}>\n                  {Object.entries(item).map(([key, value], idx) => {\n                    const { className, children, ...props } = value\n                    return (\n                      <TableCell\n                        key={key}\n                        className={cn(selected.includes(item) && 'bg-muted', className)}\n                        {...props}\n                      >\n                        <span\n                          className={cn(\n                            'flex items-center gap-2 w-full',\n                            idx === Object.entries(item).length - 1 && 'justify-end',\n                            selection && 'items-center gap-2 flex',\n                            className\n                          )}\n                        >\n                          {selection && idx === 0 && (\n                            <Checkbox\n                              className=\"border-border\"\n                              onClick={() =>\n                                setSelected(\n                                  selected.includes(item) ? selected.filter(i => i !== item) : [...selected, item]\n                                )\n                              }\n                              checked={selected.includes(item)}\n                            />\n                          )}\n                          {children}\n                        </span>\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          )}\n          {footer && (\n            <TableFooter>\n              <TableRow>\n                <TableCell colSpan={3}>Total</TableCell>\n                <TableCell className=\"text-right\">$2,500.00</TableCell>\n              </TableRow>\n            </TableFooter>\n          )}\n        </Table>\n      </ScrollArea>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center justify-between\">\n          {pagination?.showCount && (\n            <span className=\"flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n              {selected.length} of {data.length} row(s) selected.\n            </span>\n          )}\n        </div>\n        <div className=\"flex items-center justify-between gap-4\">\n          {pagination?.showGroup && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n                Rows per page\n              </span>\n              <TooltipProvider>\n                <Combobox\n                  data={Array.from({ length: Math.ceil(data.length / 5) }, (_, index) =>\n                    ((index + 1) * 5).toString()\n                  ).reduce((acc, curr) => {\n                    acc.push({ label: curr, element: { children: curr } })\n                    return acc\n                  }, [] as CommandListGroupDataType[])}\n                  className={{ trigger: 'w-[4.5rem] h-[32px]', content: 'w-[5rem] h-fit' }}\n                  onSelect={{\n                    setValue,\n                    value,\n                  }}\n                  commandInput={false}\n                  command={{\n                    key: 'm',\n                  }}\n                />\n              </TooltipProvider>\n            </div>\n          )}\n          {pagination?.showCount && (\n            <span className=\"flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n              Page {paginationState.activePage + 1} of {resultArrays.length}\n            </span>\n          )}\n\n          {pagination && (\n            <Pagination className=\"justify-end\">\n              <PaginationContent className=\"gap-2\">\n                <PaginationItem>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"w-[32px] h-[32px] p-0\"\n                    disabled={paginationState.activePage === 0}\n                    onClick={() => setPaginationState({ ...paginationState, activePage: 0 })}\n                  >\n                    <ChevronsLeftIcon className=\"size-4\" />\n                  </Button>\n                </PaginationItem>\n                <PaginationItem>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"w-[32px] h-[32px] p-0\"\n                    onClick={() =>\n                      setPaginationState({ ...paginationState, activePage: (paginationState.activePage ?? 1) - 1 })\n                    }\n                    disabled={paginationState.activePage === 0}\n                  >\n                    <ChevronLeftIcon className=\"size-4\" />\n                  </Button>\n                </PaginationItem>\n                <PaginationItem>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"w-[32px] h-[32px] p-0\"\n                    onClick={() =>\n                      setPaginationState({ ...paginationState, activePage: (paginationState.activePage ?? 1) + 1 })\n                    }\n                    disabled={paginationState.activePage === resultArrays.length - 1}\n                  >\n                    <ChevronRightIcon className=\"size-4\" />\n                  </Button>\n                </PaginationItem>\n                <PaginationItem>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"w-[32px] h-[32px] p-0\"\n                    onClick={() => setPaginationState({ ...paginationState, activePage: resultArrays.length - 1 })}\n                    disabled={paginationState.activePage === resultArrays.length - 1}\n                  >\n                    <ChevronsRightIcon className=\"size-4\" />\n                  </Button>\n                </PaginationItem>\n              </PaginationContent>\n            </Pagination>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n  TableView,\n  type TableHeaderColumns,\n  type TableViewProps as TableProps,\n  type TableDataType,\n  type TableDataKey,\n}\n"
    }
  ],
  "type": "components:ui"
}