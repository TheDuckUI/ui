{
  "name": "table",
  "dependencies": [],
  "files": [
    {
      "name": "table.tsx",
      "content": "import * as React from 'react'\n\nimport { Checkbox } from './checkbox'\n\nimport { cn, groupArrays, sortArray } from '@/lib/utils'\nimport { Input, Pagination, PaginationContent, PaginationItem } from './ShadcnUI'\nimport { Button, LabelType } from './button'\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  ChevronsLeftIcon,\n  ChevronsRightIcon,\n} from 'lucide-react'\nimport { ScrollArea } from '@radix-ui/react-scroll-area'\nimport { TooltipProvider } from './tooltip'\nimport { Combobox } from './combobox'\nimport { CommandListGroupDataType } from './command'\nimport {\n  DataTableViewOptions,\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuOptionsDataType,\n  DropdownMenuOptionsType,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from './dropdown-menu'\nimport { CaretSortIcon, DotsHorizontalIcon, MixerHorizontalIcon } from '@radix-ui/react-icons'\nimport { Badge } from './badge'\nimport { DropdownMenuProps } from '@radix-ui/react-dropdown-menu'\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table\n        ref={ref}\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n)\nTable.displayName = 'Table'\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <thead\n      ref={ref}\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n)\nTableHeader.displayName = 'TableHeader'\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody\n      ref={ref}\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n)\nTableBody.displayName = 'TableBody'\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot\n      ref={ref}\n      className={cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}\n      {...props}\n    />\n  )\n)\nTableFooter.displayName = 'TableFooter'\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', className)}\n      {...props}\n    />\n  )\n)\nTableRow.displayName = 'TableRow'\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',\n        className\n      )}\n      {...props}\n    />\n  )\n)\nTableHead.displayName = 'TableHead'\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td\n      ref={ref}\n      className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}\n      {...props}\n    />\n  )\n)\nTableCell.displayName = 'TableCell'\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption\n      ref={ref}\n      className={cn('mt-4 text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  )\n)\nTableCaption.displayName = 'TableCaption'\n\ninterface TableDropdownMenuOptions {\n  sortArray: typeof sortArray\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderColumns[]>>\n  headers: TableHeaderColumns[]\n  tableData: TableContentDataType[]\n  setTableData: React.Dispatch<React.SetStateAction<TableContentDataType[]>>\n  data: TableContentDataType[]\n  idx: number\n  column: TableHeaderColumns\n}\n\ninterface TableHeaderColumns<Y extends boolean = true> extends Partial<React.HTMLProps<HTMLTableCellElement>> {\n  sortable: boolean\n  currentSort?: Y extends true ? 'asc' | 'desc' | 'not sorted' : never\n  dropdownMenuOptions?: Y extends true ? DropdownMenuOptionsDataType<TableDropdownMenuOptions>[] : never\n}\n\ninterface TableHeaderColumnsType<T extends boolean = false> {\n  header: TableHeaderColumns<T>[]\n  viewButton: boolean\n  tableSearch: boolean\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderColumns<T>[]>>\n  setSearchQ: React.Dispatch<\n    React.SetStateAction<{\n      q: string\n      qBy: string\n    }>\n  >\n  search: { q: string; qBy: string }\n}\n\nconst TableHeaderActions = <T extends boolean = false>({\n  setHeaders,\n  header,\n  search,\n  viewButton,\n  tableSearch,\n  setSearchQ,\n}: TableHeaderColumnsType<T>) => {\n  return (\n    <>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center justify-between\">\n          {tableSearch && (\n            <div className=\"flex flex-1 items-center space-x-2\">\n              <Input\n                placeholder=\"Filter tasks...\"\n                value={search.q}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setSearchQ({ ...search, q: event.target.value })\n                }}\n                className=\"h-8 w-[150px] lg:w-[250px]\"\n              />\n            </div>\n          )}\n        </div>\n\n        {viewButton && (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size={'sm'}\n                className=\"ml-auto hidden [&>div]:h-8 h-8 w-[79px] lg:flex [&>div]:gap-0\"\n              >\n                <MixerHorizontalIcon className=\"mr-2 h-4 w-4\" />\n                View\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\">\n              <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              {header &&\n                header.map((column, idx) => {\n                  const { children, className, sortable, disabled, currentSort, dropdownMenuOptions, ...props } = column\n                  return (\n                    idx !== 0 && (\n                      <DropdownMenuCheckboxItem\n                        key={idx}\n                        className=\"capitalize\"\n                        checked={header.includes(column)}\n                        onCheckedChange={() => {\n                          setHeaders(\n                            header.includes(column) ? header.filter(sub => sub !== column) : [...header, column]\n                          )\n                        }}\n                        disabled={disabled}\n                        {...(props as React.ComponentPropsWithoutRef<typeof DropdownMenuCheckboxItem>)}\n                      >\n                        {children}\n                      </DropdownMenuCheckboxItem>\n                    )\n                  )\n                })}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        )}\n      </div>\n    </>\n  )\n}\n\ninterface TableHeaderProps<T extends boolean = false> {\n  headers: TableHeaderColumns<T>[]\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderColumns<T>[]>>\n  tableData: TableContentDataType[]\n  setTableData: React.Dispatch<React.SetStateAction<TableContentDataType[]>>\n  selection: boolean\n  selected: TableContentDataType[]\n  setSelected: React.Dispatch<React.SetStateAction<TableContentDataType[]>>\n}\n\nconst TableCustomHeader = <T extends boolean = false>({\n  headers,\n  setHeaders,\n  tableData,\n  setTableData,\n  selection,\n  selected,\n  setSelected,\n}: TableHeaderProps<T>) => {\n  return (\n    <>\n      <TableHeader>\n        <TableRow>\n          {headers.map((column, idx) => {\n            const { children, className, sortable, dropdownMenuOptions, currentSort, ...props } = column\n            return (\n              headers.some(header => header.children === column.children) && (\n                <TableHead\n                  key={idx}\n                  className=\"h-[40px]\"\n                  {...props}\n                >\n                  {!sortable ? (\n                    <span\n                      className={cn(\n                        'flex items-center gap-2 w-full h-8 data-[state=open]:bg-accent text-xs',\n                        idx === headers.length - 1 && 'justify-end bg-red-500',\n                        className\n                      )}\n                    >\n                      {selection && idx === 0 && (\n                        <Checkbox\n                          className=\"border-border\"\n                          onClick={() =>\n                            setSelected(selected.length === tableData.length ? [] : tableData.map(item => item))\n                          }\n                          checked={\n                            selected.length === tableData.length\n                              ? true\n                              : selected.length < tableData.length && selected.length\n                                ? 'indeterminate'\n                                : false\n                          }\n                        />\n                      )}\n                      {children}\n                    </span>\n                  ) : (\n                    <div className={cn('flex items-center space-x-2', className)}>\n                      {\n                        <DataTableViewOptions<TableDropdownMenuOptions>\n                          trigger={{\n                            className: '-ml-3 h-8 data-[state=open]:bg-accent text-xs',\n                            children: (\n                              <>\n                                <span>{children}</span>\n                                {headers[idx]?.currentSort === 'asc' ? (\n                                  <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n                                ) : headers[idx]?.currentSort === 'desc' ? (\n                                  <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n                                ) : (\n                                  <CaretSortIcon className=\"ml-2 h-4 w-4\" />\n                                )}\n                              </>\n                            ),\n                            variant: 'ghost',\n                            size: 'sm',\n                          }}\n                          content={{\n                            align: 'start',\n                            options: {\n                              actionsArgs: {\n                                sortArray,\n                                setTableData,\n                                setHeaders,\n                                column,\n                                idx,\n                                data: tableData,\n                                headers,\n                                tableData,\n                              } as TableDropdownMenuOptions,\n                              group: [2, 1],\n                              optionsData: dropdownMenuOptions!,\n                            },\n                          }}\n                        />\n                      }\n                    </div>\n                  )}\n                </TableHead>\n              )\n            )\n          })}\n        </TableRow>\n      </TableHeader>\n    </>\n  )\n}\n\ninterface TableCustomBodyProps<T extends boolean = false> {\n  headers: TableHeaderColumns<T>[]\n  resultArrays: TableContentDataType[][]\n  paginationState: PaginationState\n  selection: boolean\n  selected: TableContentDataType[]\n  setSelected: React.Dispatch<React.SetStateAction<TableContentDataType[]>>\n  options: DropdownMenuOptionsType<T>\n}\n\nconst TableCustomBody = <T extends boolean = false>({\n  headers,\n  resultArrays,\n  paginationState,\n  selection,\n  selected,\n  setSelected,\n  options,\n}: TableCustomBodyProps<T>) => {\n  return (\n    <TableBody>\n      {resultArrays[paginationState.activePage ?? 0]?.map((item, idx) => (\n        <TableRow key={idx}>\n          {Object.entries(item).map(([key, value], idx) => {\n            const headersEntries = headers.map(item => item.children)\n            const { className, children, ...props } = value\n\n            return (\n              headersEntries.includes(key) && (\n                <TableCell\n                  key={key}\n                  className={cn(\n                    'py-2',\n                    selected.includes(item) && 'bg-muted',\n                    idx === Object.entries(item).length - 1 && 'flex items-center gap-2',\n                    className\n                  )}\n                  {...props}\n                >\n                  <div\n                    className={cn(\n                      'items-center gap-2 flex w-full',\n                      // idx === Object.entries(item).length - 1 && 'justify-end',\n                      headers?.[idx]?.className,\n                      className\n                    )}\n                  >\n                    {selection && idx === 0 && (\n                      <Checkbox\n                        className=\"border-border\"\n                        onClick={() =>\n                          setSelected(selected.includes(item) ? selected.filter(i => i !== item) : [...selected, item])\n                        }\n                        checked={selected.includes(item)}\n                      />\n                    )}\n                    {item?.[key]?.withLabel && (\n                      <Badge\n                        variant={'outline'}\n                        size={'sm'}\n                        className=\"h-5 text-xs\"\n                      >\n                        documentation\n                      </Badge>\n                    )}\n\n                    <span className=\"text-ellipsis overflow-hidden whitespace-nowrap\">{children}</span>\n                  </div>\n                  {idx === Object.entries(item).length - 1 && (\n                    <DataTableViewOptions\n                      trigger={{\n                        className: 'flex h-8 w-12 p-0 data-[state=open]:bg-muted',\n                        children: <span className=\"sr-only\">Open menu</span>,\n                        variant: 'ghost',\n                        size: 'icon',\n                        icon: <DotsHorizontalIcon className=\"h-4 w-4\" />,\n                      }}\n                      content={{\n                        align: 'end',\n                        className: 'w-[160px]',\n                        options,\n                      }}\n                    />\n                  )}\n                </TableCell>\n              )\n            )\n          })}\n        </TableRow>\n      ))}\n    </TableBody>\n  )\n}\n\ninterface TableCustomFooterColumns extends Partial<React.ComponentPropsWithoutRef<typeof TableFooter>> {\n  columns: Partial<React.ComponentPropsWithoutRef<typeof TableCell>>[]\n}\n\nconst TableCustomFooter = ({ className, columns }: TableCustomFooterColumns) => {\n  return (\n    <TableFooter className={cn(className)}>\n      <TableRow>\n        {columns?.map((item, idx) => {\n          const { children, ...props } = item\n          return (\n            <TableCell\n              key={idx}\n              {...props}\n            >\n              {children}\n            </TableCell>\n          )\n        })}\n      </TableRow>\n    </TableFooter>\n  )\n}\n\ninterface TableContentDataType {\n  [key: string]: TableDataKey\n}\n\ninterface TableType extends Partial<React.ComponentPropsWithoutRef<typeof ScrollArea>> {}\ninterface TableDataKey extends React.HTMLProps<HTMLTableCellElement> {\n  withLabel?: LabelType\n  withIcon?: React.ReactNode\n}\ninterface TableCaptionType extends React.HTMLProps<HTMLTableCaptionElement> {}\ninterface TablePaginationType extends React.HTMLProps<HTMLDivElement> {\n  groupSize: number\n  activePage?: number\n  showCount?: boolean\n  showGroup?: boolean\n}\n\ninterface PaginationState {\n  activePage: number\n  groupSize: number\n}\n\nconst TablePagination = ({\n  resultArrays,\n  selected,\n  paginationState,\n  pagination,\n  value,\n  tableData,\n  setPaginationState,\n  setValue,\n}: {\n  selected: TableContentDataType[]\n  setValue: React.Dispatch<React.SetStateAction<string>>\n  value: string\n  tableData: TableContentDataType[]\n  pagination?: TablePaginationType\n  resultArrays: TableContentDataType[][]\n  paginationState: PaginationState\n  setPaginationState: React.Dispatch<React.SetStateAction<PaginationState>>\n}) => {\n  return (\n    <>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center justify-between\">\n          {pagination?.showCount && (\n            <span className=\"flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n              {selected.length} of {tableData.length} row(s) selected.\n            </span>\n          )}\n        </div>\n        <div className=\"flex items-center justify-between gap-4\">\n          {pagination?.showGroup && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n                Rows per page\n              </span>\n              <TooltipProvider>\n                <Combobox\n                  data={Array.from({ length: Math.ceil(tableData.length / 5) }, (_, index) =>\n                    ((index + 1) * 5).toString()\n                  ).reduce((acc, curr) => {\n                    acc.push({ label: curr, element: { children: curr } })\n                    return acc\n                  }, [] as CommandListGroupDataType[])}\n                  className={{ trigger: 'w-[4.5rem] h-[32px] gap-0', content: 'w-[5rem] h-fit' }}\n                  label={{ children: 'Rows per page' }}\n                  onSelect={{\n                    setValue,\n                    value,\n                  }}\n                  commandInput={false}\n                  command={{\n                    key: 'm',\n                  }}\n                />\n              </TooltipProvider>\n            </div>\n          )}\n          {pagination?.showCount && (\n            <span className=\"flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n              Page {paginationState.activePage + 1} of {resultArrays.length}\n            </span>\n          )}\n\n          <Pagination className=\"justify-end\">\n            <PaginationContent className=\"gap-2\">\n              <PaginationItem>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"w-[32px] h-[32px] p-0\"\n                  disabled={paginationState.activePage === 0}\n                  onClick={() => setPaginationState({ ...paginationState, activePage: 0 })}\n                >\n                  <ChevronsLeftIcon className=\"size-4\" />\n                </Button>\n              </PaginationItem>\n              <PaginationItem>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"w-[32px] h-[32px] p-0\"\n                  onClick={() =>\n                    setPaginationState({ ...paginationState, activePage: (paginationState.activePage ?? 1) - 1 })\n                  }\n                  disabled={paginationState.activePage === 0}\n                >\n                  <ChevronLeftIcon className=\"size-4\" />\n                </Button>\n              </PaginationItem>\n              <PaginationItem>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"w-[32px] h-[32px] p-0\"\n                  onClick={() =>\n                    setPaginationState({ ...paginationState, activePage: (paginationState.activePage ?? 1) + 1 })\n                  }\n                  disabled={paginationState.activePage === resultArrays.length - 1}\n                >\n                  <ChevronRightIcon className=\"size-4\" />\n                </Button>\n              </PaginationItem>\n              <PaginationItem>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"w-[32px] h-[32px] p-0\"\n                  onClick={() => setPaginationState({ ...paginationState, activePage: resultArrays.length - 1 })}\n                  disabled={paginationState.activePage === resultArrays.length - 1}\n                >\n                  <ChevronsRightIcon className=\"size-4\" />\n                </Button>\n              </PaginationItem>\n            </PaginationContent>\n          </Pagination>\n        </div>\n      </div>\n    </>\n  )\n}\n\ninterface TableViewProps<T extends boolean = false> {\n  table?: TableType\n  tableContentData: TableContentDataType[]\n  selection?: boolean\n  header?: TableHeaderColumns<T>[]\n  footer?: TableCustomFooterColumns\n  caption?: TableCaptionType\n  pagination?: TablePaginationType\n  viewButton?: boolean\n  tableSearch?: boolean\n  options: DropdownMenuOptionsType<T>\n}\n\nconst TableView = <T extends boolean = false>({\n  selection,\n  pagination,\n  viewButton,\n  tableSearch,\n  header,\n  footer,\n  tableContentData,\n  caption,\n  table,\n  options,\n}: TableViewProps<T>) => {\n  const { className: tableClassName, ...tableProps } = table! ?? {}\n  const { children: captionChildren, className: captionClassName, ...captionProps } = caption! ?? []\n  const [selected, setSelected] = React.useState<TableContentDataType[]>([])\n  const [tableData, setTableData] = React.useState(tableContentData)\n  const [paginationState, setPaginationState] = React.useState({\n    activePage: pagination?.activePage ?? 0,\n    groupSize: pagination?.groupSize ?? tableData.length / 3,\n  })\n  const [headers, setHeaders] = React.useState<TableHeaderColumns<T>[]>(header ?? [])\n  const [search, setSearchQ] = React.useState<{ q: string; qBy: string }>({ q: '', qBy: '' })\n  const [value, setValue] = React.useState<string>(paginationState.groupSize.toString())\n\n  const splitIntoChunks = (array: typeof tableData, chunkSize: number) => {\n    const chunks = []\n    for (let i = 0; i < array.length; i += chunkSize) {\n      chunks.push(array.slice(i, i + chunkSize))\n    }\n    return chunks\n  }\n\n  //NOTE: filtring the data depednign on the q\n  const filteredData = tableData.filter(item => {\n    if (search.qBy === '') {\n      return Object.values(item).some(value => {\n        return JSON.stringify(value).includes(search.q)\n      })\n    } else {\n      return item[search.qBy as keyof typeof item]?.toString()?.includes(search.q)\n    }\n  })\n\n  const resultArrays = splitIntoChunks(filteredData, +value)\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <TableHeaderActions<T>\n        viewButton={viewButton ?? false}\n        tableSearch={tableSearch ?? false}\n        search={search}\n        header={headers}\n        setHeaders={setHeaders}\n        setSearchQ={setSearchQ}\n      />\n      <ScrollArea\n        className={cn(`border border-border rounded-lg overflow-auto`, tableClassName)}\n        {...tableProps}\n      >\n        <Table>\n          {caption && (\n            <TableCaption\n              className={cn('mb-4', captionClassName)}\n              {...captionProps}\n            >\n              {caption?.children}\n            </TableCaption>\n          )}\n          {header && (\n            <TableCustomHeader<T>\n              selection={selection ?? false}\n              selected={selected}\n              headers={headers}\n              tableData={tableData}\n              setHeaders={setHeaders}\n              setTableData={setTableData}\n              setSelected={setSelected}\n            />\n          )}\n          {tableData && !!resultArrays.length && (\n            <TableCustomBody<T>\n              headers={headers}\n              resultArrays={resultArrays}\n              paginationState={paginationState}\n              selection={selection ?? false}\n              selected={selected}\n              setSelected={setSelected}\n              options={options}\n            />\n          )}\n          {footer?.columns && <TableCustomFooter {...footer} />}\n        </Table>\n      </ScrollArea>\n      {pagination && (\n        <TablePagination\n          selected={selected}\n          value={value}\n          tableData={tableData}\n          resultArrays={resultArrays}\n          paginationState={paginationState}\n          pagination={pagination}\n          setValue={setValue}\n          setPaginationState={setPaginationState}\n        />\n      )}\n    </div>\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n  TableView,\n  type TableHeaderColumns,\n  type TableViewProps as TableProps,\n  type TableContentDataType,\n  type TableDataKey,\n  type TableDropdownMenuOptions,\n}\n"
    }
  ],
  "type": "components:ui"
}