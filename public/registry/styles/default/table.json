{
  "name": "table",
  "dependencies": [],
  "files": [
    {
      "name": "table.tsx",
      "content": "import * as React from 'react'\n\nimport { cn, sortArray } from '@/lib/utils'\nimport { ArrowDownIcon, ArrowUpIcon, CirclePlus, Ellipsis } from 'lucide-react'\nimport { CaretSortIcon, MixerHorizontalIcon } from '@radix-ui/react-icons'\nimport { Checkbox } from './checkbox'\nimport { ScrollArea, ScrollBar } from './scroll-area'\nimport { PaginationCustomView } from './pagination'\nimport { InputCustomView } from './input'\nimport { LabelType } from './button'\nimport { TooltipProvider } from './tooltip'\nimport { Combobox, ComboboxType } from './combobox'\nimport { CommandListGroupDataType } from './command'\nimport { DropdownMenuOptionsDataType, DropdownMenuOptionsType, DropdownMenuView } from './dropdown-menu'\nimport { Badge } from './badge'\nimport { ContextCustomView, ContextMenuOptionsType } from './context-menu'\nimport { useDuckShortcut } from '@ahmedayob/duck-shortcut'\nimport { useDebounceCallback } from '@/hooks'\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table\n        ref={ref}\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n)\nTable.displayName = 'Table'\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <thead\n      ref={ref}\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n)\nTableHeader.displayName = 'TableHeader'\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody\n      ref={ref}\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n)\nTableBody.displayName = 'TableBody'\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot\n      ref={ref}\n      className={cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}\n      {...props}\n    />\n  )\n)\nTableFooter.displayName = 'TableFooter'\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', className)}\n      {...props}\n    />\n  )\n)\nTableRow.displayName = 'TableRow'\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',\n        className\n      )}\n      {...props}\n    />\n  )\n)\nTableHead.displayName = 'TableHead'\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td\n      ref={ref}\n      className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}\n      {...props}\n    />\n  )\n)\nTableCell.displayName = 'TableCell'\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption\n      ref={ref}\n      className={cn('mt-4 text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  )\n)\nTableCaption.displayName = 'TableCaption'\n\nexport interface TableDropdownMenuOptions<\n  Y extends keyof C = string,\n  C extends Record<string, any> = Record<string, string>,\n> {\n  sortArray: typeof sortArray\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderColumns[]>>\n  headers: TableHeaderColumns[]\n  tableData: TableContentDataType<Y, C>[]\n  setTableData: React.Dispatch<React.SetStateAction<TableContentDataType<Y, C>[]>>\n  data: TableContentDataType<Y, C>[]\n  idx: number\n  column: TableHeaderColumns\n}\n\nexport interface TableHeaderColumns<\n  T extends boolean = true,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n> extends Partial<React.HTMLProps<HTMLTableCellElement>> {\n  label: Y extends keyof C ? Y : string\n  sortable?: boolean\n  showLabel?: T\n  currentSort?: T extends true ? 'asc' | 'desc' | 'not sorted' : never\n  dropdownMenuOptions?: T extends true ? DropdownMenuOptionsDataType<TableDropdownMenuOptions<Y, C>>[] : never\n}\n\nexport interface TableHeaderColumnsType<\n  T extends boolean = true,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n> {\n  header: TableHeaderColumns<T, Y, C>[]\n  headers: TableHeaderColumns<T, Y, C>[]\n  viewButton: boolean\n  tableSearch: boolean\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderColumns<T, Y, C>[]>>\n  search: {\n    searchValue: { q: string; qBy: string[] }\n    setSearchValue: React.Dispatch<React.SetStateAction<{ q: string; qBy: string[] }>>\n  }\n  filter: ComboboxType<string>[]\n}\n\nexport interface TableHeaderOptionsType<\n  Y extends keyof C = string,\n  C extends Record<string, any> = Record<string, string>,\n> {\n  sortArray: typeof sortArray\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderColumns[]>>\n  headers: TableHeaderColumns[]\n  tableData: TableContentDataType<Y, C>[]\n  setTableData: React.Dispatch<React.SetStateAction<TableContentDataType<Y, C>[]>>\n  data: TableContentDataType<Y, C>[]\n  idx: number\n  column: TableHeaderColumns\n}\n\nconst TableHeaderActions = <\n  T extends boolean = true,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n>({\n  setHeaders,\n  header,\n  headers,\n  search,\n  viewButton,\n  tableSearch,\n  filter,\n}: TableHeaderColumnsType<T, Y, C>) => {\n  const [value, setValue] = React.useState<string[]>([])\n\n  React.useEffect(() => {\n    search.setSearchValue({ ...search.searchValue, qBy: value })\n  }, [value])\n\n  //NOTE: Debounce search\n  const debouncedSearch = useDebounceCallback((newValue: string) => {\n    search.setSearchValue(prev => ({\n      ...prev,\n      q: newValue,\n    }))\n  }, 500)\n\n  //NOTE: Gen options for filteres with label values\n  const optionsData = header.map((column, idx) => {\n    const { children, className, label, sortable, disabled, currentSort, dropdownMenuOptions, ...props } = column\n\n    return {\n      key: idx,\n      className: 'capitalize',\n      checked: headers.includes(column),\n      disabled: disabled,\n      onCheckedChange: () => {\n        setHeaders(prevHeaders => {\n          const exists = prevHeaders.includes(column)\n          if (exists) {\n            return prevHeaders.filter(sub => sub !== column)\n          }\n          const originalIndex = header.indexOf(column)\n          const newHeaders = [...prevHeaders]\n          newHeaders.splice(originalIndex, 0, column)\n          return newHeaders.sort((a, b) => header.indexOf(a) - header.indexOf(b))\n        })\n      },\n      children: label ?? children,\n      ...props,\n    }\n  }) as DropdownMenuOptionsDataType<C>[]\n\n  //NOTE: Duck shortcut\n  const inputRef = React.useRef<HTMLInputElement>(null)\n  useDuckShortcut({\n    keys: ['ctrl+shift+f'],\n    onKeysPressed: () => {\n      if (inputRef.current) {\n        inputRef.current.focus()\n      }\n    },\n  })\n\n  return (\n    <>\n      <div className=\"flex items-end lg:items-center justify-between\">\n        <div className=\"grid lg:flex items-center lg:justify-between gap-2\">\n          {/*NOTE: Rendering the search bar only if the tableSearch prop is true.*/}\n          {tableSearch && (\n            <div className=\"flex flex-1 items-center space-x-2\">\n              <InputCustomView\n                trigger={{\n                  className: 'h-8 w-[150px] lg:w-[200px]',\n                  placeholder: 'Filter tasks...',\n                  onChange: (event: React.ChangeEvent<HTMLInputElement>) => debouncedSearch(event.target.value),\n                }}\n                label={{\n                  children: 'Filter tasks...',\n                }}\n                badge={{\n                  children: '⌃+⇧+F',\n                }}\n              />\n            </div>\n          )}\n\n          {/*NOTE: Rendering the filter only if the filter prop is true.*/}\n          {filter && (\n            <div className={cn('flex items-center gap-2')}>\n              {filter?.map((filter, idx) => {\n                const {\n                  className: triggerClassName,\n                  children: triggerChildren,\n                  ...triggerProps\n                } = filter?.trigger ?? {}\n                return (\n                  <Combobox<string>\n                    key={idx}\n                    type={'listbox'}\n                    title={filter?.title}\n                    wrapper={filter?.wrapper}\n                    trigger={{\n                      icon: {\n                        icon: CirclePlus,\n                        className: '!size-4 stroke-[1.5]',\n                      },\n                      children: triggerChildren,\n                      className: cn('[&>div>span]:text-xs ml-auto w-[88px] lg:w-auto', triggerClassName),\n                      ...triggerProps,\n                    }}\n                    onSelect={\n                      filter?.onSelect ?? {\n                        value: value,\n                        setValue: setValue,\n                      }\n                    }\n                    content={{\n                      ...filter?.content!,\n                    }}\n                  />\n                )\n              })}\n            </div>\n          )}\n        </div>\n\n        {/*NOTE: Rendering the view button only if the viewButton prop is true.*/}\n        {viewButton && (\n          <DropdownMenuView\n            trigger={{\n              children: (\n                <>\n                  <MixerHorizontalIcon className=\"mr-2 h-4 w-4\" />\n                  View\n                </>\n              ),\n              className: 'ml-auto [&>div]:h-8 h-8 w-[79px] lg:flex [&>div]:gap-0 text-xs',\n              label: {\n                children: 'Toggle columns',\n                showCommand: true,\n                showLabel: true,\n                side: 'top',\n              },\n              command: {\n                key: 'ctrl+shift+v',\n                label: '⌃+⇧+V',\n              },\n            }}\n            content={{\n              label: {\n                children: 'Toggle columns',\n              },\n              options: {\n                itemType: 'checkbox',\n                optionsData: optionsData,\n              },\n            }}\n          />\n        )}\n      </div>\n    </>\n  )\n}\n\nexport interface TableHeaderProps<\n  T extends boolean = false,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n> {\n  headers: TableHeaderColumns<T, Y, C>[]\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderColumns<T, Y, C>[]>>\n  tableData: TableContentDataType<Y, C>[]\n  setTableData: React.Dispatch<React.SetStateAction<TableContentDataType<Y, C>[]>>\n  selection: boolean\n  selected: TableContentDataType<Y, C>[]\n  setSelected: React.Dispatch<React.SetStateAction<TableContentDataType<Y, C>[]>>\n}\n\nconst TableCustomHeader = <\n  T extends boolean = false,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n>({\n  headers,\n  setHeaders,\n  tableData,\n  setTableData,\n  selection,\n  selected,\n  setSelected,\n}: TableHeaderProps<T, Y, C>) => {\n  return (\n    <>\n      <TableHeader>\n        <TableRow>\n          {headers.map((column, idx) => {\n            const { children, className, sortable, label, showLabel, dropdownMenuOptions, currentSort, ...props } =\n              column\n            return (\n              headers.some(header => header.children === column.children) && (\n                <TableHead\n                  key={idx}\n                  className=\"h-[40px] py-2\"\n                  {...props}\n                >\n                  {/*NOTE: Rendering Sorting else rendering label*/}\n                  {!sortable ? (\n                    <span\n                      className={cn(\n                        'flex items-center gap-2 w-full h-8 data-[state=open]:bg-accent text-xs capitalize',\n                        dropdownMenuOptions?.length && 'justify-end',\n                        className\n                      )}\n                    >\n                      {selection && idx === 0 && (\n                        <Checkbox\n                          className=\"border-border\"\n                          onClick={() =>\n                            setSelected(selected.length === tableData.length ? [] : tableData.map(item => item))\n                          }\n                          checked={\n                            selected.length === tableData.length\n                              ? true\n                              : selected.length < tableData.length && selected.length\n                                ? 'indeterminate'\n                                : false\n                          }\n                        />\n                      )}\n                      {label ?? children}\n                    </span>\n                  ) : (\n                    <div className={cn('flex items-center space-x-2', className)}>\n                      {dropdownMenuOptions?.length && (\n                        <DropdownMenuView<TableDropdownMenuOptions<Y, C>>\n                          trigger={{\n                            className: '-ml-3 h-8 data-[state=open]:bg-accent text-xs ',\n                            children: (\n                              <>\n                                <span className=\"capitalize\">{label ?? children}</span>\n                                {headers[idx]?.currentSort === 'asc' ? (\n                                  <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n                                ) : headers[idx]?.currentSort === 'desc' ? (\n                                  <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n                                ) : (\n                                  <CaretSortIcon className=\"ml-2 h-4 w-4\" />\n                                )}\n                              </>\n                            ),\n                            label: showLabel\n                              ? {\n                                  children: label + ' options',\n                                  className: 'capitalize',\n                                  showLabel: true,\n                                  side: 'top',\n                                }\n                              : undefined,\n                            variant: 'ghost',\n                            size: 'sm',\n                          }}\n                          content={{\n                            align: 'start',\n                            options: {\n                              actionsArgs: {\n                                sortArray,\n                                setTableData,\n                                setHeaders,\n                                column,\n                                idx,\n                                data: tableData,\n                                headers,\n                                tableData,\n                              } as unknown as TableDropdownMenuOptions<Y, C>,\n                              group: [2, 1],\n                              optionsData: dropdownMenuOptions as\n                                | DropdownMenuOptionsDataType<TableDropdownMenuOptions<Y, C>>[]\n                                | undefined,\n                            },\n                          }}\n                        />\n                      )}\n                    </div>\n                  )}\n                </TableHead>\n              )\n            )\n          })}\n        </TableRow>\n      </TableHeader>\n    </>\n  )\n}\n\nexport interface TableCustomBodyProps<\n  T extends boolean = false,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n> {\n  headers: TableHeaderColumns<T, Y, C>[]\n  resultArrays: TableContentDataType<Y, C>[][]\n  paginationState: PaginationState\n  selection: boolean\n  selected: TableContentDataType<Y, C>[]\n  setSelected: React.Dispatch<React.SetStateAction<TableContentDataType<Y, C>[]>>\n  dropdownMenu: DropdownMenuOptionsType<TableHeaderOptionsType<Y, C>>\n  contextMenu: ContextMenuOptionsType<TableHeaderOptionsType<Y, C>>\n  filtersData: ComboboxType<string>[] | undefined\n}\n\nexport type TableDataFilteredType<T extends Record<string, any>> = {\n  [K in keyof T]: [K, T[K]]\n}[keyof T][]\n\nconst TableCustomBody = <\n  T extends boolean = false,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n>({\n  headers,\n  resultArrays,\n  paginationState,\n  selection,\n  selected,\n  setSelected,\n  dropdownMenu,\n  contextMenu,\n  filtersData,\n}: TableCustomBodyProps<T, Y, C>) => {\n  return (\n    <TableBody>\n      {resultArrays[paginationState.activePage ?? 0]?.map((item, idx) => {\n        {\n          /*NOTE: filtering the data based on headers */\n        }\n        const tableDataFiltered = Object.entries(item).filter(([key]) => {\n          const headersEntries = headers.map(\n            item => item.label.toString().toLowerCase() ?? item.children?.toString().toLowerCase()\n          )\n          return headersEntries.includes(key.toLowerCase())\n        }) as TableDataFilteredType<typeof item>\n\n        return (\n          <ContextCustomView\n            key={idx}\n            trigger={{\n              children: (\n                <TableRow key={idx}>\n                  {tableDataFiltered.map(([key, value], idx) => {\n                    const headersEntries = headers.map(\n                      item => item.label.toString().toLowerCase() ?? item.children?.toString().toLowerCase()\n                    )\n                    const { className, children, withLabel, ...props } = value\n                    const {\n                      className: labelClassName,\n                      children: labelChildren,\n                      type: labelType = 'default',\n                      ...labelProps\n                    } = item?.[key]?.withLabel ?? {}\n\n                    return (\n                      headersEntries.includes(key.toString().toLowerCase()) && (\n                        <TableCell\n                          key={key}\n                          className={cn('py-2 h-[50px]', selected.includes(item) && 'bg-muted', className)}\n                          {...props}\n                        >\n                          <div\n                            className={cn(\n                              'items-center gap-2 flex w-full',\n                              headers?.[idx]?.className,\n                              className,\n                              idx === headersEntries.length - 1 && dropdownMenu && 'justify-between w-full'\n                            )}\n                          >\n                            {/*NOTE: Rendering Checkbox */}\n                            {selection && idx === 0 && (\n                              <Checkbox\n                                className=\"border-border\"\n                                onClick={() =>\n                                  setSelected(\n                                    selected.includes(item) ? selected.filter(i => i !== item) : [...selected, item]\n                                  )\n                                }\n                                checked={selected.includes(item)}\n                              />\n                            )}\n\n                            {/*NOTE: Rendering Label */}\n                            {labelChildren && (\n                              <Badge\n                                variant={'outline'}\n                                size={'sm'}\n                                className={cn(labelType === 'default' ? '' : 'bg-red-500', labelClassName)}\n                                {...labelProps}\n                              >\n                                {labelChildren}\n                              </Badge>\n                            )}\n\n                            <div className=\"flex items-center gap-2 text-ellipsis overflow-hidden whitespace-nowrap\">\n                              {/*NOTE: Getting Icons from Filter Data */}\n                              {filtersData?.length &&\n                                filtersData?.map(item => {\n                                  return item?.content?.data.map((item, idx) => {\n                                    const { icon: Icon, ...props } = item?.element?.icon ?? {}\n                                    return item.label?.toLowerCase() ===\n                                      (children as string).toString().toLowerCase() ? (\n                                      <span\n                                        className=\"whitespace-nowrap\"\n                                        key={idx}\n                                      >\n                                        {(Icon ? <Icon {...props} /> : '') as React.ReactNode}\n                                      </span>\n                                    ) : null\n                                  })\n                                })}\n\n                              {/*NOTE: Rendering the row column childrend */}\n                              <span className=\"text-ellipsis overflow-hidden whitespace-nowrap\">{children}</span>\n                            </div>\n                            {/*NOTE: Dropdown Menu */}\n                            {idx === headersEntries.length - 1 && dropdownMenu.optionsData?.length && (\n                              <DropdownMenuView\n                                trigger={{\n                                  className: 'flex h-8 w-8 p-0 data-[state=open]:bg-muted',\n                                  children: <span className=\"sr-only\">Open menu</span>,\n                                  variant: 'ghost',\n                                  size: 'icon',\n                                  icon: {\n                                    icon: Ellipsis,\n                                    className: 'h-4 w-4',\n                                  },\n                                }}\n                                content={{\n                                  align: 'end',\n                                  options: dropdownMenu,\n                                }}\n                              />\n                            )}\n                          </div>\n                        </TableCell>\n                      )\n                    )\n                  })}\n                </TableRow>\n              ),\n            }}\n            content={{\n              options: contextMenu,\n            }}\n          />\n        )\n      })}\n    </TableBody>\n  )\n}\n\nexport interface TableCustomFooterColumns extends Partial<React.ComponentPropsWithoutRef<typeof TableFooter>> {\n  columns: FooterCoumnType[]\n}\n\nexport type FooterCoumnType = Partial<React.ComponentPropsWithoutRef<typeof TableCell>>\n\nconst TableCustomFooter = ({ className, columns }: TableCustomFooterColumns) => {\n  return (\n    <TableFooter className={cn(className)}>\n      {columns?.map((item, idx) => {\n        const { children, ...props } = item\n        return (\n          <TableRow\n            key={idx}\n            {...props}\n          >\n            <TableCell>{children}</TableCell>\n          </TableRow>\n        )\n      })}\n    </TableFooter>\n  )\n}\n\nexport type TableContentDataType<Y extends keyof C = string, C extends Record<string, any> = Record<string, string>> = {\n  [key in Y]: TableDataKey & { children: C[key] }\n}\n\nexport interface TableType extends Partial<React.ComponentPropsWithoutRef<typeof ScrollArea>> {}\nexport interface TableDataKey extends React.HTMLProps<HTMLTableCellElement> {\n  withLabel?: Omit<LabelType, 'showCommand' | 'showLabel'>\n  withIcon?: React.ReactNode\n}\nexport interface TableCaptionType extends React.HTMLProps<HTMLTableCaptionElement> {}\nexport interface TablePaginationsType extends React.HTMLProps<HTMLDivElement> {\n  groupSize: number\n  activePage?: number\n  showPageCount?: boolean\n  showSelectCount?: boolean\n  showNavigation?: boolean\n  showGroup?: boolean\n}\n\nexport interface PaginationState {\n  activePage: number\n  groupSize: number\n}\n\nexport interface TablePaginationType<\n  Y extends keyof C = string,\n  C extends Record<string, any> = Record<string, string>,\n> {\n  selected: TableContentDataType<Y, C>[]\n  setValue: React.Dispatch<React.SetStateAction<string[]>>\n  value: string[]\n  tableData: TableContentDataType<Y, C>[]\n  paginations?: TablePaginationsType\n  resultArrays: TableContentDataType<Y, C>[][]\n  paginationState: PaginationState\n  setPaginationState: React.Dispatch<React.SetStateAction<PaginationState>>\n}\n\nconst TablePagination = <Y extends keyof C = string, C extends Record<string, any> = Record<string, string>>({\n  resultArrays,\n  selected,\n  paginationState,\n  paginations,\n  value,\n  tableData,\n  setPaginationState,\n  setValue,\n}: TablePaginationType<Y, C>) => {\n  //NOTE: gen the page length data\n  const pageLengthData = paginations?.groupSize\n    ? Array.from({ length: Math.ceil(tableData.length / paginations.groupSize) }, (_, index) => {\n        const start = index * paginations.groupSize + 1\n        const end = Math.min((index + 1) * paginations.groupSize, tableData.length)\n        if (start > tableData.length) return null\n        return end.toString()\n      })\n        .filter(Boolean)\n        .reduce((acc, curr) => {\n          acc.push({ label: curr!, element: { children: curr! } })\n          return acc\n        }, [] as CommandListGroupDataType[])\n    : []\n\n  return (\n    <>\n      <div className=\"grid lg:flex items-center lg:justify-between gap-4 lg::gap-0\">\n        <div className=\"flex items-center justify-between\">\n          {/*NOTE: Select Count */}\n          {paginations?.showSelectCount && (\n            <span className=\"flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n              {selected.length} of {tableData.length} row(s) selected.\n            </span>\n          )}\n        </div>\n        <div className=\"flex items-center lg:justify-between lg:gap-4\">\n          {/*NOTE: Group Size */}\n          {paginations?.showGroup && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"max-2xl:hidden flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n                Rows per page\n              </span>\n              <TooltipProvider>\n                <Combobox<string>\n                  type=\"combobox\"\n                  content={{\n                    data: pageLengthData ?? [],\n                    showSearchInput: false,\n                    className: 'w-[5rem] h-fit',\n                  }}\n                  trigger={{\n                    command: {\n                      key: 'ctrl+shift+c',\n                      label: '⌃+⇧+C',\n                    },\n                    label: {\n                      children: 'Rows per page',\n                      showLabel: true,\n                      side: 'top',\n                      className: 'text-xs',\n                      showCommand: true,\n                    },\n                    className: 'w-[4.5rem] h-[32px] gap-0',\n                  }}\n                  onSelect={{\n                    setValue,\n                    value,\n                  }}\n                />\n              </TooltipProvider>\n            </div>\n          )}\n          {paginations?.showPageCount && (\n            <span className=\"max-lg:hidden flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n              Page {paginationState.activePage + 1} of {resultArrays.length}\n            </span>\n          )}\n\n          {/*NOTE: Navigation */}\n          {paginations?.showNavigation && (\n            <PaginationCustomView\n              right={{\n                onClick: () =>\n                  setPaginationState({\n                    ...paginationState,\n                    activePage:\n                      paginationState.activePage === resultArrays.length - 1\n                        ? resultArrays.length - 1\n                        : (paginationState.activePage ?? 1) + 1,\n                  }),\n                command: {\n                  key: 'ctrl+shift+up',\n                  label: '⌃+⇧+↑',\n                  action: () =>\n                    setPaginationState({\n                      ...paginationState,\n                      activePage:\n                        paginationState.activePage === resultArrays.length - 1\n                          ? resultArrays.length - 1\n                          : (paginationState.activePage ?? 1) + 1,\n                    }),\n                },\n                label: {\n                  showCommand: true,\n                  showLabel: true,\n                  side: 'top',\n                  children: 'Next page',\n                },\n                disabled: paginationState.activePage === resultArrays.length - 1,\n              }}\n              maxRight={{\n                onClick: () => setPaginationState({ ...paginationState, activePage: resultArrays.length - 1 }),\n                command: {\n                  key: 'ctrl+shift+right',\n                  label: '⌃+⇧+→',\n                  action: () => setPaginationState({ ...paginationState, activePage: resultArrays.length - 1 }),\n                },\n                label: {\n                  showCommand: true,\n                  showLabel: true,\n                  side: 'top',\n                  children: 'Last page',\n                },\n                disabled: paginationState.activePage === resultArrays.length - 1,\n              }}\n              left={{\n                onClick: () =>\n                  setPaginationState({\n                    ...paginationState,\n                    activePage: paginationState.activePage === 0 ? 0 : (paginationState.activePage ?? 1) - 1,\n                  }),\n                command: {\n                  key: 'ctrl+shift+down',\n                  label: '⌃+⇧+↓',\n                  action: () =>\n                    setPaginationState({\n                      ...paginationState,\n                      activePage: paginationState.activePage === 0 ? 0 : (paginationState.activePage ?? 1) - 1,\n                    }),\n                },\n                label: {\n                  showCommand: true,\n                  showLabel: true,\n                  side: 'top',\n                  children: 'Previous page',\n                },\n                disabled: paginationState.activePage === 0,\n              }}\n              maxLeft={{\n                onClick: () => setPaginationState({ ...paginationState, activePage: 0 }),\n                command: {\n                  key: 'ctrl+shift+left',\n                  label: '⌃+⇧+←',\n                  action: () => setPaginationState({ ...paginationState, activePage: 0 }),\n                },\n                label: {\n                  showCommand: true,\n                  showLabel: true,\n                  side: 'top',\n                  children: 'First page',\n                },\n                disabled: paginationState.activePage === 0,\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport interface TableViewProps<\n  T extends boolean = false,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n> {\n  wrapper?: React.HTMLProps<HTMLDivElement>\n  filters?: ComboboxType<string>[]\n  table?: TableType\n  tableContentData: TableContentDataType<Y, C>[]\n  selection?: boolean\n  header?: TableHeaderColumns<T, Y, C>[]\n  footer?: TableCustomFooterColumns\n  caption?: TableCaptionType\n  pagination?: TablePaginationsType\n  viewButton?: boolean\n  tableSearch?: boolean\n  dropdownMenu?: DropdownMenuOptionsType<TableHeaderOptionsType<Y, C>>\n  contextMenu?: ContextMenuOptionsType<TableHeaderOptionsType<Y, C>>\n}\n\nconst TableView = <\n  T extends boolean = false,\n  Y extends keyof C & string = string,\n  C extends Record<string, any> = Record<string, string>,\n>({\n  wrapper,\n  selection,\n  pagination,\n  viewButton,\n  tableSearch,\n  header,\n  footer,\n  tableContentData,\n  caption,\n  table,\n  dropdownMenu,\n  contextMenu,\n  filters,\n}: TableViewProps<T, Y, C>) => {\n  const { className: wrapperClassName, ...wrapperProps } = wrapper! ?? {}\n  const { className: tableClassName, ...tableProps } = table! ?? {}\n  const { children: captionChildren, className: captionClassName, ...captionProps } = caption! ?? []\n  const [selected, setSelected] = React.useState<TableContentDataType<Y, C>[]>([])\n  const [tableData, setTableData] = React.useState<TableContentDataType<Y, C>[]>(tableContentData)\n  const [paginationState, setPaginationState] = React.useState({\n    activePage: pagination?.activePage ?? 0,\n    groupSize: pagination?.groupSize ?? tableData.length,\n  })\n  const [headers, setHeaders] = React.useState<TableHeaderColumns<T, Y, C>[]>(header ?? [])\n  const [search, setSearch] = React.useState<{ q: string; qBy: string[] }>({ q: '', qBy: [] })\n  const [value, setValue] = React.useState<string[]>([paginationState.groupSize.toString()])\n\n  const [filterLabels, setFilterLabels] = React.useState<{ [key: string]: number }>({})\n\n  //NOTE: Function to split array into chunks\n  const splitIntoChunks = (array: typeof tableData, chunkSize: number) => {\n    const chunks = []\n    for (let i = 0; i < array.length; i += chunkSize) {\n      chunks.push(array.slice(i, i + chunkSize))\n    }\n    return chunks\n  }\n\n  const filteredData = React.useMemo(() => {\n    //NOTE: Step 1: Filter the data based on search.q and search.qBy\n    const data = tableData.filter(item => {\n      return !search.qBy.length\n        ? Object.values(item).some(value => JSON.stringify(value).toLowerCase().includes(search.q.toLowerCase()))\n        : Object.values(item).some(value =>\n            search.qBy.some(q => JSON.stringify(value).toLowerCase().includes(q.toLowerCase()))\n          )\n    })\n\n    //NOTE: Step 2: Calculate label counts based on the filtered data\n    const labelCounts: { [key: string]: number } = {}\n    data.forEach(item => {\n      Object.values(item).forEach(value => {\n        filters?.forEach(filter => {\n          filter?.content?.data.forEach(option => {\n            const label = option?.label?.toLowerCase()\n            if (\n              JSON.stringify(value)\n                .toLowerCase()\n                .includes(label ?? '')\n            ) {\n              labelCounts[label ?? ''] = (labelCounts[label ?? ''] || 0) + 1\n            }\n          })\n        })\n      })\n    })\n\n    setFilterLabels(labelCounts)\n\n    return data\n  }, [tableData, filters, search])\n\n  //NOTE: Step 3: Update the filters to display the count based on the filtered data\n  const updatedFilters = React.useMemo(() => {\n    return filters?.map(filter => {\n      return {\n        ...filter,\n        content: {\n          ...filter.content,\n          data: filter?.content?.data.map(option => {\n            const label = option?.label?.toLowerCase()\n            return {\n              ...option,\n              element: {\n                ...option.element,\n                label: {\n                  ...option?.element?.label,\n                  children: filterLabels[label ?? ''] || 0,\n                },\n              },\n            }\n          }),\n        },\n      }\n    })\n  }, [filters, filterLabels])\n\n  //NOTE: Step 4: Split the data into chunks based on the groupSize\n  const resultArrays = splitIntoChunks(filteredData, +value)\n\n  return (\n    <div\n      className={cn(`flex flex-col gap-4`,   wrapperClassName)}\n      {...wrapperProps}\n    >\n      <TableHeaderActions<T, Y, C>\n        search={{ searchValue: search, setSearchValue: setSearch }}\n        viewButton={viewButton ?? false}\n        tableSearch={tableSearch ?? false}\n        header={header ?? []}\n        filter={(updatedFilters as ComboboxType<string>[]) ?? []}\n        headers={headers}\n        setHeaders={setHeaders}\n      />\n      <ScrollArea\n        className={cn('border border-border rounded-lg !overflow-visible', tableClassName)}\n        {...tableProps}\n      >\n        <Table>\n          {header && (\n            <TableCustomHeader<T, Y, C>\n              selection={selection ?? false}\n              selected={selected}\n              headers={headers}\n              tableData={tableData}\n              setHeaders={setHeaders}\n              setTableData={setTableData}\n              setSelected={setSelected}\n            />\n          )}\n          {tableData && !!resultArrays.length && (\n            <TableCustomBody<T, Y, C>\n              headers={headers}\n              resultArrays={resultArrays}\n              paginationState={paginationState}\n              selection={selection ?? false}\n              selected={selected}\n              filtersData={filters}\n              setSelected={setSelected}\n              dropdownMenu={dropdownMenu ?? {}}\n              contextMenu={contextMenu ?? {}}\n            />\n          )}\n          {footer?.columns && <TableCustomFooter {...footer} />}\n        </Table>\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n      {caption && (\n        <div\n          className={cn('mb-4 text-sm text-muted-foreground text-center', captionClassName)}\n          {...captionProps}\n        >\n          {caption?.children}\n        </div>\n      )}\n      {pagination && (\n        <TablePagination<Y, C>\n          selected={selected}\n          value={value}\n          tableData={tableData}\n          resultArrays={resultArrays}\n          paginationState={paginationState}\n          paginations={pagination}\n          setValue={setValue}\n          setPaginationState={setPaginationState}\n        />\n      )}\n    </div>\n  )\n}\n\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption, TableView }\n"
    }
  ],
  "type": "components:ui"
}