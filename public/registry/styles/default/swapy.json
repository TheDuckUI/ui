{
  "name": "swapy",
  "dependencies": [],
  "files": [
    {
      "name": "swapy.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd'\nimport { cn } from '@/lib'\nimport { Badge } from './badge'\nimport { Button } from './button'\nimport { EllipsisVertical, Plus } from 'lucide-react'\nimport { ScrollArea } from './scroll-area'\n\n// Function to reorder the list on drag end\nconst reorder = <T,>(list: T[], startIndex: number, endIndex: number): T[] => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n  return result\n}\n\ninterface TaskType {\n  id: string\n  content: string\n  avatar: string\n}\n\ninterface ColumnType {\n  id: string\n  title: string\n  taskIds: string[]\n}\n\ninterface InitDataType {\n  tasks: Record<string, TaskType>\n  columns: Record<string, ColumnType>\n  columnOrder: string[]\n}\n\n// Initial data structure with tasks and columns\nconst initData: InitDataType = {\n  tasks: {\n    'task-1': {\n      id: 'task-1',\n      content: 'Take out the garbage',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-2': {\n      id: 'task-2',\n      content: 'Watch my favorite show',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-3': {\n      id: 'task-3',\n      content: 'Charge my phone',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/GR8R-finn-min.png',\n    },\n    'task-4': {\n      id: 'task-4',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-5': {\n      id: 'task-5',\n      content: 'Do laundry',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/GR8R-finn-min.png',\n    },\n    'task-6': {\n      id: 'task-6',\n      content: 'Mow the lawn',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-7': {\n      id: 'task-7',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-8': {\n      id: 'task-8',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-9': {\n      id: 'task-9',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-10': {\n      id: 'task-10',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-11': {\n      id: 'task-11',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-12': {\n      id: 'task-12',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-13': {\n      id: 'task-13',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-14': {\n      id: 'task-14',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/GR8R-finn-min.png',\n    },\n    'task-15': {\n      id: 'task-15',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-16': {\n      id: 'task-16',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/GR8R-finn-min.png',\n    },\n    'task-17': {\n      id: 'task-17',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/VMSU-princess-min.png',\n    },\n    'task-18': {\n      id: 'task-18',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/GR8R-finn-min.png',\n    },\n    'task-19': {\n      id: 'task-19',\n      content: 'Cook dinner',\n      avatar: 'https://uploads.codesandbox.io/uploads/user/cf4b346c-70d1-4313-acb0-36ea4634ca74/GR8R-finn-min.png',\n    },\n  },\n\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'To Do',\n      taskIds: [\n        'task-1',\n        'task-2',\n        'task-3',\n        'task-4',\n        'task-5',\n        'task-6',\n        'task-7',\n        'task-8',\n        'task-9',\n        'task-10',\n        'task-11',\n        'task-12',\n        'task-13',\n        'task-14',\n        'task-15',\n        'task-16',\n        'task-17',\n        'task-18',\n        'task-19',\n      ],\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'In Progress',\n      taskIds: [],\n    },\n  },\n  columnOrder: ['column-1', 'column-2'],\n}\n\n// Function to move tasks between columns\nconst move = (\n  source: string[],\n  destination: string[],\n  droppableSource: { index: number; droppableId: string },\n  droppableDestination: { index: number; droppableId: string }\n) => {\n  const sourceClone = Array.from(source)\n  const destClone = Array.from(destination)\n  const [removed] = sourceClone.splice(droppableSource.index, 1)\n  destClone.splice(droppableDestination.index, 0, removed)\n\n  return {\n    [droppableSource.droppableId]: sourceClone,\n    [droppableDestination.droppableId]: destClone,\n  }\n}\n\nexport const Swapy: React.FC = () => {\n  const [state, setState] = React.useState<InitDataType>(initData)\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result\n\n    // Dropped outside the list\n    if (!destination) return\n\n    const sourceColumn = state.columns[source.droppableId]\n    const destinationColumn = state.columns[destination.droppableId]\n\n    // Reordering within the same column\n    if (sourceColumn === destinationColumn) {\n      const newTaskIds = reorder(sourceColumn.taskIds, source.index, destination.index)\n      const newColumn: ColumnType = {\n        ...sourceColumn,\n        taskIds: newTaskIds,\n      }\n\n      setState({\n        ...state,\n        columns: {\n          ...state.columns,\n          [newColumn.id]: newColumn,\n        },\n      })\n    } else {\n      // Moving to a different column\n      const result = move(sourceColumn.taskIds, destinationColumn.taskIds, source, destination)\n\n      const newState: InitDataType = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [sourceColumn.id]: {\n            ...sourceColumn,\n            taskIds: result[source.droppableId],\n          },\n          [destinationColumn.id]: {\n            ...destinationColumn,\n            taskIds: result[destination.droppableId],\n          },\n        },\n      }\n\n      setState(newState)\n    }\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable\n        droppableId=\"board\"\n        type=\"COLUMN\"\n        direction=\"horizontal\"\n        // ignoreContainerClipping={Boolean(containerHeight)}\n        // isCombineEnabled={isCombineEnabled}\n      >\n        {(provided, snapshot) => (\n          <div\n            className={cn('flex space-around bg-[#161617] p-4 rounded-lg border border-border border-solid gap-4')}\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n            {state.columnOrder.map(columnId => {\n              const column = state.columns[columnId]\n              const tasks = column.taskIds.map(taskId => state.tasks[taskId])\n\n              return (\n                <Draggable\n                  key={column.id}\n                  draggableId={column.id}\n                  index={0}\n                >\n                  {(provided, snapshot) => (\n                    <div\n                      className=\"flex flex-col gap-2 bg-:w rounded-md py-2\"\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                    >\n                      <SwapyColumnHeader column={column} />\n                      <SwapyAddColumnRow />\n\n                      <Droppable\n                        key={column.id}\n                        droppableId={column.id}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            className={cn(\n                              'pt-4 border-[2px] border-none rounded-md max-h-[300px] overflow-y-scroll overflow-x-hidden',\n                              snapshot.isDraggingOver && 'border-dashed bg-sky-100/5 border-green-400/30',\n                              snapshot.draggingOverWith && 'border-dashed bg-sky-100/5 border-blue-400/30'\n                            )}\n                            style={{\n                              width: 300,\n                              height: 500,\n                            }}\n                            {...provided.droppableProps}\n                          >\n                            {tasks.map((task, index) => (\n                              <Draggable\n                                key={task.id}\n                                draggableId={task.id}\n                                index={index}\n                              >\n                                {(provided, snapshot) => (\n                                  <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    className={cn(\n                                      'select-none p-3 bg-secondary border border-border rounded-md flex items-center gap-3 mb-2 mx-4',\n                                      snapshot.isDragging && 'opacity-95 bg-none'\n                                    )}\n                                    style={{\n                                      ...provided.draggableProps.style,\n                                    }}\n                                  >\n                                    <img\n                                      src={task.avatar}\n                                      alt={task.content}\n                                      width={40}\n                                      height={40}\n                                      className=\"rounded-full\"\n                                    />\n                                    {task.content}\n                                  </div>\n                                )}\n                              </Draggable>\n                            ))}\n                            {provided.placeholder}\n                          </div>\n                        )}\n                      </Droppable>\n                    </div>\n                  )}\n                </Draggable>\n              )\n            })}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  )\n}\n\nexport const SwapyColumnHeader: React.FC<{ column: ColumnType }> = ({ column }) => {\n  return (\n    <div className={cn('flex items-center justify-between gap-2 mb-2 px-4')}>\n      <div className={cn('flex items-center gap-2')}>\n        <Badge\n          size={'icon'}\n          className={cn('size-2 bg-red-500')}\n        />\n        <h3>{column.title}</h3>\n        <span>{column.taskIds.length}</span>\n      </div>\n      <div>\n        <EllipsisVertical className={cn('size-5')} />\n      </div>\n    </div>\n  )\n}\n\nexport const SwapyAddColumnRow: React.FC = () => {\n  return (\n    <div className=\"flex items-center gap-2 mb-1rem px-4\">\n      <Button\n        size={'default'}\n        variant={'secondary'}\n        className={cn('w-full')}\n      >\n        <Plus className={cn('size-5')} />\n      </Button>\n    </div>\n  )\n}\n"
    }
  ],
  "type": "components:ui"
}